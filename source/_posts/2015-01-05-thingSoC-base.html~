---
layout: project
category: project
title: "thingSoC : System on Chip Platform for the Internet of Things"
permalink: /projects/thingSoC.html
product_slug: thingSoC
product_img: thingSoC.png
product_id: 25149701
product_display: false
product_price: "$xx.yy"
product_name: thingSoC
licensing: true
cc_by_nc_sa: true
meta:
  robots: "noodp, noydir, noarchive"
  description: "thingSoC : System on Chip Platform for the Internet of Things"
  abstract: "thingSoC : System on Chip Platform for the Internet of Things"
  keywords: "thingSoC, arduino, lcd, lcd controller, uno, mega, due, psoc, psoc1, psoc3, psoc4, psoc5, cypress, cpm, cpld, fpga"
comments: true
---
<p>
	Modern configurable System-on-Chip and Field Programmable Gate Array devices, 
        are a blank slate for designers to draw on. However, most systems require 
        several common resources and peripherals in order to present the user with a 
        usable "System Platform" upon which to base an IoT application.

        ThingSoC is a Reference System Virtual Platform (RSVP) implementation, 
        that is designed to provide an IoT system platform 
        with commonly required resources and peripherals, 
        as well as a vendor neutral, portable, API 
        to access and control those resources and peripherals.
</p>
<!-- more -->
<p>
        While most semiconductor vendors will provide a baseline "driver" library for their parts, 
        or a configuation tool within their IDE (Integrated Development Environment) to select and configure IP blocks, 
        these tend to be unique, vendor specific, and/or proprietary in nature. It can often take a significant 
        amount of work to port an embedded application from one SOC/Microprocessor family to another.

        thingSoC is intended to provide a vendor neutral, and device/architecture agnostic set of resources,
        peripherals, and Application Programming Interfaces (API's) with which to access them.

        By providing a common set of resources and API's, embedded applications can be ported more rapidly, 
        and with less code modification or if/def configuration. We are also looking at several complimentary efforts 
        underway in this subject area, including MRAPI and MCAPI, for a common API structure.
</p>
<h3>{{page.product_slug}} Features:</h3>
<ul>
  <li>&nbsp</li>
</ul>

<p>
</p>

<h3>About {{page.product_slug}}:</h3>
  <p>
  </p>

<h3>{{page.product_slug}} Application Examples:</h3>
<ul>
  <li>&nbsp</li>
</ul>

